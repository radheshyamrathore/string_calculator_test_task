c
user_input
c
user_input
c
user_input
c
end
  end
    end
      end
        expect { calculator.add('1,-2,3,-4') }.to raise_error(RuntimeError, 'Negatives not allowed: -2, -4')
        calculator = StringCalculator.new
      it 'throws an exception with the negative numbers in the message' do
    context 'when negative numbers are present' do
    end
      end
        expect(result).to eq(3)
        result = calculator.add("//;\n1;2")
        calculator = StringCalculator.new
      it 'supports custom delimiters' do
    context 'when different delimiters are used' do
    end
      end
        expect(result).to eq(6)
        result = calculator.add("1\n2,3")
        calculator = StringCalculator.new
      it 'treats new lines as valid separators' do
    context 'when new lines between numbers' do
    end
      end
        expect(result).to eq(6)
        result = calculator.add('1,5')
        calculator = StringCalculator.new
      it 'returns the sum of the numbers' do
    context 'when given two numbers' do
    end
      end
        expect(result).to eq(1)
        result = calculator.add('1')
        calculator = StringCalculator.new
      it 'returns the number' do
    context 'when given a single number' do
    end
      end
        expect(result).to eq(0)
        result = calculator.add('')
        calculator = StringCalculator.new
      it 'returns 0' do
    context 'when given an empty string' do
  describe '#add' do
RSpec.describe StringCalculator do
require_relative '../string_calculator'
require 'byebug'
c
user
c
user_input
c
user_input.to_s
user_input
c
user_input
c
user_input
c
user_input
n
c
user_input
c
a
n
c
user_input
c
args.flatten
args
c
user_input
c
user_input
c
args
n
c
args
c
user_input
c
args
c
user_input
c
user_input = gets.chomp.split(',')
c
args
c
puts "Enter something:"
c
args
c
args
c
args
c
user_input
c
args
c
n
a = args.map! { |s| s.gsub(/["\s]/, "") }
c
args.map! { |s| s.gsub(/["\s]/, "") }
args
c
output
output = object.add("1\n2,3")
output = object.add(user_input)
user_input
n
c
user
n
a
n
a
n
c
a.split(', ')
a = user_input.tr('"', "'")
user_input.tr('"', "'")
user_input..tr('"', "'")
user_input
user = user_input.map! { |s| s.gsub(/["\s]/, "") }
n
c
a = user_input.split(", ")
a = user_input.to_a
user_input
a = user_input.to_a
user_input
user = user_input.each { |s| s.gsub(/["\s]/, "") }
user = user_input.map! { |s| s.gsub(/["\s]/, "") }
"", "1", "1,5"
puts user_input
n
user_input
c
user_input
c
user
n
c
user = user_input.map! { |s| s.gsub(/["\s]/, "") }
user = user_input.each { |s| s.gsub(/["\s]/, "") }
user
n
c
user = user_input.each { |s| s.gsub(/["\s]/, "") }
user_input.each { |s| s.gsub(/["\s]/, "") }
user_input.map! { |s| s.gsub(/["\s]/, "") }
user_input.each { |s| s.gsub(/["\s]/, "") }
user
n
user
n
puts user_input.class
n
c
puts user
n
c
a
puts a
a = user_input.each { |s| s.gsub(/["\s]/, "") }
a = user_input.each! { |s| s.gsub(/["\s]/, "") }
puts a
a = user_input.map! { |s| s.gsub(/["\s]/, "") }
puts user
user_input.map! { |s| s.gsub(/["\s]/, "") }
puts user
n
c
puts user_input.class
n
c
user_input.map! { |s| s.gsub(/["\s]/, "") }
n
c
args.map! { |s| s.gsub(/["\s]/, "") }
args = args.flatten
args.map! { |s| s.gsub(/["\s]/, "") }
args.flatten
args.flattern
args
args.first
args.map! { |s| s.gsub(/["\s]/, "") }
c
args..split(",")
args
map! { |s| s.gsub(/["\s]/, "") }
args
modified_array = original_array.map { |s| s.gsub("\\", " ") }
modified_array = original_array.map { |s| s.gsub("\", " ") }
original_array
modified_array = original_array.map { |s| s.gsub("\", "") }
modified_array = original_array.map { |s| s.gsub("\\", "") }
modified_array = [s.replace("\\", "") for s in original_array]
original_array = ["\"\", \"1\", \"1,5\""]
args
c
args = args.map { |s| s.delete_prefix("\"").delete_suffix("\"") }
args.map { |s| s.delete_prefix("\"").delete_suffix("\"") }
"\".delete_prefix("\"")
args.map { |s| s.delete_prefix("\"").delete_suffix("\"") }
args.map { |s| s.delete_prefix("\"").delete_suffix("\"") }.inspect
args.split(", ").map { |s| s.delete_prefix("\"").delete_suffix("\"") }
JSON.parse(args)
args
c
args
c
args
n
c
n
numbers
numbers = a.scan(/-?\d+/).map(&:to_i)
a
c
  end
p numbers.flatten.sum
end
numbers << a.scan(/-?\d+/).map(&:to_i)
args.each do |a|
numbers = []
    #   parse_input(input)
    # @results = args.map do |input|
  def add(*args)
c
modified_input = input.gsub("//", "").gsub("\n", "")
n
delimiter = determine_delimiter(input)
c
modified_input = input.gsub("//", "").gsub("\n", "")
modified_input = input.gsub("//", "").gsub("\n", delimiter)
delimiter
n
determine_delimiter
delimiter = determine_delimiter(input)
input
